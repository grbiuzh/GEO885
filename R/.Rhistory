sf::sf_use_s2(FALSE)
amm_arr <- st_as_sf(amm_arr)
# sf::sf_use_s2(FALSE)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
# create map
ggplot() +
geom_sf(data=world)+
geom_sf(data = flightmap_sort, aes(fill = n)) +
labs(fill = "Locations per country") +
scico::scale_fill_scico(palette = "bilbao")+
theme(panel.grid.minor = element_blank())+
ggtitle("Arrival locations for all GIUZ flights counnted by country")+
xlab("Longitude") + ylab("Latitude")+
theme(legend.position = "none")
#ISO2 form european countries
EUISO2 <- read.csv(file.path(dataFolder, "EuroAlpha2-Codes.csv"), sep = ";")
EUISO2$X <- NULL
EUISO2$ï..Name<-gsub("Â","",as.character(EUISO2$ï..Name))
EUISO2 <- read.csv(file.path(dataFolder, "EuroAlpha2-Codes.csv"), sep = ";")
EUISO2$X <- NULL
EUISO2$ï..Name<-gsub("Â","",as.character(EUISO2$ï..Name))
View(EUISO2)
europe<- left_join(EUISO2, world)
europe$Name <- NULL
europe_ohne_RU <-subset(europe, ISO2!= "RU")
#just european flights arrival and departure
europe_arr <- amm[which(amm$arr_country %in% unique(EUISO2$ISO2)),]
europe_dep <- amm[which(amm$dep_country %in% unique(EUISO2$ISO2)),]
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = .5, shape = 23) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = .5, shape = 23) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path")+
theme(legend.position = "none")
arrdep_europe
View(arrdep_europe)
View(europe_arr)
View(flightmap_sort)
# create map
ggplot() +
geom_sf(data=world)+
geom_sf(data = filter(flightmap_sort$NAME =! "Switzerland"), aes(fill = n)) +
# create map
ggplot() +
geom_sf(data=world)+
geom_sf(data = filter(flightmap_sort$NAME =! Switzerland), aes(fill = n)) +
# create map
ggplot() +
geom_sf(data=world)+
geom_sf(data = filter(flightmap_sort$NAME != "Switzerland"), aes(fill = n)) +
labs(fill = "Locations per country") +
scico::scale_fill_scico(palette = "bilbao")+
theme(panel.grid.minor = element_blank())+
ggtitle("Arrival locations for all GIUZ flights counnted by country")+
xlab("Longitude") + ylab("Latitude")+
theme(legend.position = "none")
flightmap_sort_noCH <- flightmap_sort %>% filter(flightmap_sort$NAME != "Switzerland")
ggplot() +
geom_sf(data=world)+
geom_sf(data = flightmap_sort_noCH, aes(fill = n)) +
labs(fill = "Locations per country") +
scico::scale_fill_scico(palette = "bilbao")+
theme(panel.grid.minor = element_blank())+
ggtitle("Arrival locations for all GIUZ flights counnted by country")+
xlab("Longitude") + ylab("Latitude")+
theme(legend.position = "none")
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = .5, shape = 23) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = .5, shape = 23) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path")
arrdep_europe
View(europe_arr)
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = .5, shape = 23) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = .5, shape = 23) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path") +
theme(legend = "none")
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = .5, shape = 23) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = .5, shape = 23) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path") +
theme(legend.position = "none")
arrdep_europe
#subset of european countries from world df
europe<- left_join(EUISO2, world)
europe$Name <- NULL
europe_ohne_RU <-subset(europe, ISO2!= "RU")
#just european flights arrival and departure
europe_arr <- amm[which(amm$arr_country %in% unique(EUISO2$ISO2)),] %>% filter(arr_country != "Ru")
europe_dep <- amm[which(amm$dep_country %in% unique(EUISO2$ISO2)),] %>% filter(dep_country != "Ru")
View(europe_arr)
europe<- left_join(EUISO2, world)
europe$Name <- NULL
europe_ohne_RU <-subset(europe, ISO2!= "RU")
#just european flights arrival and departure
europe_arr <- amm[which(amm$arr_country %in% unique(EUISO2$ISO2)),]
europe_arr <- europe_arr %>% filter(arr_country != "Ru")
europe_dep <- amm[which(amm$dep_country %in% unique(EUISO2$ISO2)),]
europe_dep <- europe_dep %>% filter(dep_country != "Ru")
europe_arr <- europe_arr %>% filter(arr_country != "RU")
europe_dep <- europe_dep %>% filter(dep_country != "RU")
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = .5, shape = 23) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = .5, shape = 23) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path") +
theme(legend.position = "none")
arrdep_europe
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = 1, shape = 23) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = 1, shape = 23) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path") +
theme(legend.position = "none")
arrdep_europe
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = 1, shape = 21) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = 1, shape = 21) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path") +
theme(legend.position = "none")
arrdep_europe
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = 1, shape = 16) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = 1, shape = 19) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path") +
theme(legend.position = "none")
arrdep_europe
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = 1, shape = 16) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = 1, shape = 11) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path") +
theme(legend.position = "none")
arrdep_europe
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = 1, shape = 9) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = 1, shape = 19) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path") +
theme(legend.position = "none")
arrdep_europe
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = 2, shape = 9) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = 1, shape = 19) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path") +
theme(legend.position = "none")
arrdep_europe
arrdep_europe <-ggplot() +
geom_sf(data=europe_ohne_RU, aes(geometry = geometry))+
geom_sf(data = europe_dep, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = 2, shape = 9) +
geom_sf(data = europe_arr, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = .75, shape = 19) +
ggtitle("Departure and arrival locations for all european flights separated by symbols")+ xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path") +
theme(legend.position = "none")
arrdep_europe
amm_business <- read.csv(file.path(dataFolder, "amm_business_complete.csv"), sep = ";")
amm_economy <- read.csv(file.path(dataFolder, "amm_economy_complete.csv"), sep = ";")
View(amm_business)
amm_business <- read.csv(file.path(dataFolder, "amm_business_complete.csv"))
amm_economy <- read.csv(file.path(dataFolder, "amm_economy_complete.csv"))
View(amm_business)
amm <- amm %>% rename(dep_lon = longitude_deg.x,
dep_lat = latitude_deg.x,
arr_lon = longitude_deg.y,
arr_lat = latitude_deg.y)
amm <- amm %>% rowwise() %>%
mutate(distance_km = (geosphere::distHaversine(c(dep_lon, dep_lat),
c(arr_lon, arr_lat)))/1000)
emissions_per_class <- amm %>%
group_by(year, cabin_class) %>%
summarise(total_emissions = sum(EMISSIONS_KGCO2EQ))
aggregated_distance <- amm %>%
group_by(year) %>%
summarise(total_distance = sum(distance_km))
max_distance <- max(aggregated_distance$total_distance)
View(aggregated_distance)
View(amm_business)
#Business
amm_business <- read.csv(file.path(dataFolder, "amm_business_complete.csv"))
amm_business <- left_join(amm_business,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm_business <- amm_business %>% rename(dep_coordinates = coordinates,
dep_country = iso_country)
amm_business <- left_join(amm_business,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_business <- amm_business %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
amm_business <- amm_business %>% rename(dep_lon = longitude_deg.x,
dep_lat = latitude_deg.x,
arr_lon = longitude_deg.y,
arr_lat = latitude_deg.y)
amm_business <- amm_business %>% rowwise() %>%
mutate(distance_km = (geosphere::distHaversine(c(dep_lon, dep_lat),
c(arr_lon, arr_lat)))/1000)
#Economy
amm_economy <- read.csv(file.path(dataFolder, "amm_economy_complete.csv"))
amm_economy <- left_join(amm_economy,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm_economy <- amm_economy %>% rename(dep_coordinates = coordinates,
dep_country = iso_country)
amm_economy <- left_join(amm_economy,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_economy <- amm_economy %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
amm_economy <- amm_economy %>% rename(dep_lon = longitude_deg.x,
dep_lat = latitude_deg.x,
arr_lon = longitude_deg.y,
arr_lat = latitude_deg.y)
amm_economy <- amm_economy %>% rowwise() %>%
mutate(distance_km = (geosphere::distHaversine(c(dep_lon, dep_lat),
c(arr_lon, arr_lat)))/1000)
View(amm_business)
#Business
amm_business <- read.csv(file.path(dataFolder, "amm_business_complete.csv"))
amm_business$EMISSIONS_KGCO2EQ <- as.numeric(amm_business$EMISSIONS_KGCO2EQ)
amm_business <- amm_business %>% drop_na(EMISSIONS_KGCO2EQ)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
library(readxl)
library(slider)
library(scales)
library(wesanderson)
library(here)
# sf::sf_use_s2(FALSE)
dataFolder   <- here::here()
RFolder      <- here::here()
figureFolder <- here::here("figs")
airports <- read.csv(file.path(dataFolder, "airports.csv"))
amm_incomplete <- read_excel(file.path(dataFolder, "MNF_amm.xlsx")) #Datensatz mit allen Flügen, vollständig und unvollständig
world <- st_read(file.path(dataFolder, "TM_WORLD_BORDERS_SIMPL-0 Kopie"))
airports <- airports %>% dplyr::select(-c(continent, home_link, wikipedia_link, elevation_ft, municipality, scheduled_service, type, keywords, name, ident, iso_region, gps_code,local_code))
airports <- subset(airports, iata_code != "")
airports <- airports %>% st_as_sf(coords = c("longitude_deg", "latitude_deg"), crs = 4326, remove = FALSE) %>% rename(coordinates = geometry)
paste("Completeness of dataset", nrow(amm)/nrow(amm_incomplete))*100
amm <- read.csv(file.path(dataFolder, "amm_complete.csv"))
# Alle Flugdaten mit "MISSING" values
amm <- subset(amm, select = -c(IATA_CODE_DEP))
amm <- subset(amm, select = -c(IATA_CODE_ARR))
amm$EMISSIONS_KGCO2EQ <- as.numeric(amm$EMISSIONS_KGCO2EQ)
amm <- amm %>% drop_na(EMISSIONS_KGCO2EQ)
paste("Completeness of dataset", nrow(amm)/nrow(amm_incomplete))*100
paste("Completeness of dataset", (nrow(amm)/nrow(amm_incomplete))*100)
paste("Completeness of dataset", (nrow(amm)/nrow(amm_incomplete))*100, "%")
paste("Completeness of dataset", (nrow(amm)/nrow(amm_incomplete))*100,"%")
paste("Completeness of dataset", (nrow(amm)/nrow(amm_incomplete))*100"%")
paste("Completeness of dataset", (nrow(amm)/nrow(amm_incomplete))*100,"%")
red <- wes_palette("Darjeeling1")[1]
green <- wes_palette("Darjeeling1")[2]
orange <- wes_palette("Darjeeling1")[3]
blue <- wes_palette("Darjeeling1")[5]
dark_orange <- wes_palette("Darjeeling1")[4]
black <- wes_palette("Darjeeling2")[5]
eco2 <- ggplot(emissions_per_class, aes(fill=cabin_class, y=total_emissions, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_discrete(name = "Reason for travel")+
ggtitle("Cabin class for each flight at MNF (2018-2020)") +
xlab("") +
ylab("emissions [kgCO2]") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
library(readxl)
library(slider)
library(scales)
library(wesanderson)
library(here)
# sf::sf_use_s2(FALSE)
dataFolder   <- here::here()
RFolder      <- here::here()
figureFolder <- here::here("figs")
airports <- read.csv(file.path(dataFolder, "airports.csv"))
amm_incomplete <- read_excel(file.path(dataFolder, "MNF_amm.xlsx")) #Datensatz mit allen Flügen, vollständig und unvollständig
world <- st_read(file.path(dataFolder, "TM_WORLD_BORDERS_SIMPL-0 Kopie"))
airports <- airports %>% dplyr::select(-c(continent, home_link, wikipedia_link, elevation_ft, municipality, scheduled_service, type, keywords, name, ident, iso_region, gps_code,local_code))
airports <- subset(airports, iata_code != "")
airports <- airports %>% st_as_sf(coords = c("longitude_deg", "latitude_deg"), crs = 4326, remove = FALSE) %>% rename(coordinates = geometry)
amm <- read.csv(file.path(dataFolder, "amm_complete.csv"))
# Alle Flugdaten mit "MISSING" values
amm <- subset(amm, select = -c(IATA_CODE_DEP))
amm <- subset(amm, select = -c(IATA_CODE_ARR))
amm$EMISSIONS_KGCO2EQ <- as.numeric(amm$EMISSIONS_KGCO2EQ)
amm <- amm %>% drop_na(EMISSIONS_KGCO2EQ)
paste("Completeness of dataset", (nrow(amm)/nrow(amm_incomplete))*100,"%")
amm_arr <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_arr <- amm_arr %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
amm <- left_join(amm,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm <- amm %>% rename(dep_coordinates = coordinates,
dep_country = iso_country)
amm <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm <- amm %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
drop <- c("id.x", "id.y")
amm = amm[,!(names(amm) %in% drop)]
amm <- amm %>% rename(dep_lon = longitude_deg.x,
dep_lat = latitude_deg.x,
arr_lon = longitude_deg.y,
arr_lat = latitude_deg.y)
amm <- amm %>% rowwise() %>%
mutate(distance_km = (geosphere::distHaversine(c(dep_lon, dep_lat),
c(arr_lon, arr_lat)))/1000)
emissions_per_class <- amm %>%
group_by(year, cabin_class) %>%
summarise(total_emissions = sum(EMISSIONS_KGCO2EQ))
aggregated_distance <- amm %>%
group_by(year) %>%
summarise(total_distance = sum(distance_km))
max_distance <- max(aggregated_distance$total_distance)
red <- wes_palette("Darjeeling1")[1]
green <- wes_palette("Darjeeling1")[2]
orange <- wes_palette("Darjeeling1")[3]
blue <- wes_palette("Darjeeling1")[5]
dark_orange <- wes_palette("Darjeeling1")[4]
black <- wes_palette("Darjeeling2")[5]
eco2 <- ggplot(emissions_per_class, aes(fill=cabin_class, y=total_emissions, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_discrete(name = "Reason for travel")+
ggtitle("Cabin class for each flight at MNF (2018-2020)") +
xlab("") +
ylab("emissions [kgCO2]") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
eco2
ggsave(file="flight_class.png", eco2,
width = 10,
height= 7)
arrdep <- ggplot() +
geom_sf(data=world)+
geom_sf(data = amm, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = .5, shape = 23) +
geom_sf(data = amm, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = .5, shape = 23) +
ggtitle("Departure and arrival locations for all GIUZ flights separated by symbols")+
xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path")+
theme(legend.position = "none")
arrdep
ggsave(file="flight_locations.png", arrdep,
width = 10,
height= 7)
#https://www.gis-blog.com/flight-connection-map-with-r/
ZRH <- filter(amm, DEPARTURE_AIRPORT!="ZRH")
library(maps)
#create basemap
map("world", fill=T, col="grey8", bg="grey15")
#overlay airports
points(amm$longitude_deg.x, amm$latitude_deg.x, pch=3, cex=0.1, col="chocolate1")+
points(amm$longitude_deg.y, amm$latitude_deg.y, pch=3, cex=0.1, col="chocolate1")
for (i in (1:dim(amm)[1])) {
inter <- gcIntermediate(c(ZRH$longitude_deg.x[1], ZRH$latitude_deg.x[1]), c(amm$longitude_deg.y[i], amm$latitude_deg.y[i]), n=200)
lines(inter, lwd=0.1, col="turquoise2")
}
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
library(readxl)
library(slider)
library(scales)
library(wesanderson)
library(here)
library(maps)
# sf::sf_use_s2(FALSE)
dataFolder   <- here::here()
RFolder      <- here::here()
figureFolder <- here::here("figs")
eco2 <- ggplot(emissions_per_class, aes(fill=cabin_class, y=total_emissions, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_discrete(name = "Reason for travel")+
ggtitle("Cabin class for each flight at MNF (2018-2020)") +
xlab("") +
ylab("emissions [kgCO2]") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
eco2
ggsave(file="flight_class.png", eco2,
width = 10,
height= 7)
eco2 <- ggplot(emissions_per_class, aes(fill=cabin_class, y=total_emissions, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_discrete(name = "Reason for travel")+
ggtitle("Cabin class for each flight at MNF (2018-2020)") +
xlab("") +
ylab("emissions [kgCO2]") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
eco2
ggsave(file="flight_class.png", eco2,
width = 10,
height= 7)
eco2 <- ggplot(emissions_per_class, aes(fill=cabin_class, y=total_emissions, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_discrete(name = "Reason for travel")+
ggtitle("Cabin class for each flight at MNF (2018-2020)") +
xlab("") +
ylab("emissions [kgCO2]") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
eco2
ggsave(file="flight_class.png", eco2,
width = 10,
height= 7)
ZRH <- filter(amm, DEPARTURE_AIRPORT!="ZRH")
#create basemap
map("world", fill=T, col="grey8", bg="grey15")
#overlay airports
points(amm$longitude_deg.x, amm$latitude_deg.x, pch=3, cex=0.1, col="chocolate1")+
points(amm$longitude_deg.y, amm$latitude_deg.y, pch=3, cex=0.1, col="chocolate1")
ZRH <- filter(amm, DEPARTURE_AIRPORT!="ZRH")
#create basemap
map("world", fill=T, col="grey8", bg="grey15")
#overlay airports
points(amm$dep_lon, amm$dep_lat, pch=3, cex=0.1, col="chocolate1")+
points(amm$arr_lon, amm$arr_lat, pch=3, cex=0.1, col="chocolate1")
for (i in (1:dim(amm)[1])) {
inter <- gcIntermediate(c(ZRH$dep_lon[1], ZRH$dep_lat[1]), c(amm$arr_lon[i], amm$arr_lat[i]), n=200)
lines(inter, lwd=0.1, col="turquoise2")
}
#https://www.gis-blog.com/flight-connection-map-with-r/
ZRH <- filter(amm, DEPARTURE_AIRPORT!="ZRH")
#create basemap
map("world", fill=T, col="grey8", bg="grey15")
#overlay airports
points(amm$dep_lon, amm$dep_lat, pch=3, cex=0.1, col="chocolate1")+
points(amm$arr_lon, amm$arr_lat, pch=3, cex=0.1, col="chocolate1")
for (i in (1:dim(amm)[1])) {
inter <- gcIntermediate(c(ZRH$dep_lon[1], ZRH$dep_lat[1]), c(amm$arr_lon[i], amm$arr_lat[i]), n=200)
lines(inter, lwd=0.1, col="turquoise2")
}
amm_arr <- st_as_sf(amm_arr)
# sf::sf_use_s2(FALSE)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
flightmap_sort_noCH <- flightmap_sort %>% filter(flightmap_sort$NAME != "Switzerland")
View(flightmap_sort_noCH)
?write.table
write.table(flightmap_sort,file="countryflights_counted.csv")
View(flightmap_sort)
