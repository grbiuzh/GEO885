library(shiny)
library(geosphere)
library(readxl)
library(slider)
library(scales)
library(wesanderson)
library(here)
# sf::sf_use_s2(FALSE)
dataFolder   <- here::here()
RFolder      <- here::here()
figureFolder <- here::here("figs")
airports <- read.csv(file.path(dataFolder, "airports.csv"))
amm_incomplete <- read_excel(file.path(dataFolder, "MNF_amm.xlsx")) #Datensatz mit allen Flügen, vollständig und unvollständig
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
library(readxl)
library(slider)
library(scales)
library(wesanderson)
library(here)
# sf::sf_use_s2(FALSE)
dataFolder   <- here::here()
RFolder      <- here::here()
figureFolder <- here::here("figs")
airports <- read.csv(file.path(dataFolder, "airports.csv"))
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
library(readxl)
library(slider)
library(scales)
library(wesanderson)
library(here)
# sf::sf_use_s2(FALSE)
dataFolder   <- here::here()
RFolder      <- here::here()
figureFolder <- here::here("figs")
airports <- read.csv(file.path(dataFolder, "airports.csv"))
amm_incomplete <- read_excel(file.path(dataFolder, "MNF_amm.xlsx")) #Datensatz mit allen Flügen, vollständig und unvollständig
world <- st_read(file.path(dataFolder, "TM_WORLD_BORDERS_SIMPL-0 Kopie/TM_WORLD_BORDERS_SIMPL-0 Kopie"))
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
library(readxl)
library(slider)
library(scales)
library(wesanderson)
library(here)
# sf::sf_use_s2(FALSE)
dataFolder   <- here::here()
RFolder      <- here::here()
figureFolder <- here::here("figs")
airports <- read.csv(file.path(dataFolder, "airports.csv"))
amm_incomplete <- read_excel(file.path(dataFolder, "MNF_amm.xlsx")) #Datensatz mit allen Flügen, vollständig und unvollständig
world <- st_read(file.path(dataFolder, "TM_WORLD_BORDERS_SIMPL-0 Kopie"))
airports <- airports %>% dplyr::select(-c(continent, home_link, wikipedia_link, elevation_ft, municipality, scheduled_service, type, keywords, name, ident, iso_region, gps_code,local_code))
airports <- subset(airports, iata_code != "")
airports <- airports %>% st_as_sf(coords = c("longitude_deg", "latitude_deg"), crs = 4326, remove = FALSE) %>% rename(coordinates = geometry)
amm_incomplete <- amm_incomplete %>% rename(flight_number = Flugnummer,
DEPARTURE_AIRPORT = Abflug,
ARRIVAL_AIRPORT = Destination,
EMISSIONS_KGCO2EQ = "THG-Emissionen (in t CO2e)",
cabin_class = Serviceklasse,
currencies = "Kosten (in CHF)",
year = Jahr,
distance = "Distanz (in km)")
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "Y"] <- "economy"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "B"] <- "business"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "F"] <- "first"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "P"] <- "premium_economy"
amm_incomplete$currencies <- "USD"
amm_incomplete <- amm_incomplete %>% dplyr::select(-c(EMISSIONS_KGCO2EQ, distance))
amm_incomplete <- amm_incomplete %>%
separate("flight_number",
into = c("fn_code", "fn_number"),
sep = "(?<=[A-Za-z])(?=[0-9])")
amm_incomplete <- subset(amm_incomplete, RecID != 6869)
write.csv(amm_incomplete, file = "amm_incomplete.csv", row.names=FALSE) # Emissions API geht mit beiden files oben, Datensatz
amm <- read.csv(file.path(dataFolder, "amm_complete.csv"))
# Alle Flugdaten mit "MISSING" values
amm <- subset(amm, select = -c(IATA_CODE_DEP))
amm <- subset(amm, select = -c(IATA_CODE_ARR))
amm$EMISSIONS_KGCO2EQ <- as.numeric(amm$EMISSIONS_KGCO2EQ)
amm <- amm %>% drop_na(EMISSIONS_KGCO2EQ)
amm_distance <- amm
(nrow(amm)/nrow(amm_incomplete))*100
amm_arr <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_arr <- amm_arr %>% rename(arr_coordinates = coordinates,
dep_country = iso_country)
amm <- left_join(amm,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm <- amm %>% rename(dep_coordinates = coordinates,
dep_country = iso_country)
amm <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm <- amm %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
drop <- c("id.x", "id.y")
amm = amm[,!(names(amm) %in% drop)]
amm_distance <- left_join(amm_distance,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm_distance <- left_join(amm_distance, airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_distance <- amm_distance %>% rename(dep_lon = longitude_deg.x,
dep_lat = latitude_deg.x,
arr_lon = longitude_deg.y,
arr_lat = latitude_deg.y)
amm_distance <- amm_distance %>% rowwise() %>%
mutate(distance_km = (geosphere::distHaversine(c(dep_lon, dep_lat),
c(arr_lon, arr_lat)))/1000)
emissions_per_class <- amm %>%
group_by(year, cabin_class) %>%
summarise(total_emissions = sum(EMISSIONS_KGCO2EQ))
aggregated_distance <- amm_distance %>%
group_by(year) %>%
summarise(total_distance = sum(distance_km))
max_distance <- max(aggregated_distance$total_distance)
red <- wes_palette("Darjeeling1")[1]
green <- wes_palette("Darjeeling1")[2]
orange <- wes_palette("Darjeeling1")[3]
blue <- wes_palette("Darjeeling1")[5]
dark_orange <- wes_palette("Darjeeling1")[4]
black <- wes_palette("Darjeeling2")[5]
eco2 <- ggplot(emissions_per_class, aes(fill=cabin_class, y=total_emissions, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_discrete(name = "Reason for travel")+
ggtitle("Cabin class for each flight at MNF (2018-2020)") +
xlab("") +
ylab("emissions [kgCO2]") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
eco2
ggsave(file="flight_class.png", eco2,
width = 10,
height= 7)
arrdep <- ggplot() +
geom_sf(data=world)+
geom_sf(data = amm, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = 1, shape = 23) +
geom_sf(data = amm, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = 1, shape = 23) +
ggtitle("Departure and arrival locations for all GIUZ flights separated by symbols")+
xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path")+
theme(legend.position = "none")
arrdep
ggsave(file="flight_locations.png", arrdep,
width = 10,
height= 7)
amm_arr <- st_as_sf(amm_arr)
# sf::sf_use_s2(FALSE)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
arrdep <- ggplot() +
geom_sf(data=world)+
geom_sf(data = amm, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = .5, shape = 23) +
geom_sf(data = amm, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = .5, shape = 23) +
ggtitle("Departure and arrival locations for all GIUZ flights separated by symbols")+
xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path")+
theme(legend.position = "none")
arrdep
ggsave(file="flight_locations.png", arrdep,
width = 10,
height= 7)
sf::sf_use_s2(FALSE)
amm_arr <- st_as_sf(amm_arr)
# sf::sf_use_s2(FALSE)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
# create map
ggplot() +
geom_sf(data=world)+
geom_sf(data = flightmap_sort, aes(fill = n)) +
labs(fill = "Locations per country") +
scico::scale_fill_scico(palette = "bilbao")+
theme(panel.grid.minor = element_blank())+
ggtitle("Arrival locations for all GIUZ flights counnted by country")+
xlab("Longitude") + ylab("Latitude")+
theme(legend.position = "none")
View(flightmap_sort)
View(world)
EUISO2 <- read.csv(file.path(dataFolder, "EuroAlpha2-Codes.csv"))
View(EUISO2)
EUISO2 <- read.csv(file.path(dataFolder, "EuroAlpha2-Codes.csv", separate = ";"))
EUISO2 <- read.csv(file.path(dataFolder, "EuroAlpha2-Codes.csv"), separate = ";")
EUISO2 <- read.csv(file.path(dataFolder, "EuroAlpha2-Codes.csv"), sep = ";")
EUISO2$X <- NULL
View(amm_arr)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
library(readxl)
library(slider)
library(scales)
library(wesanderson)
library(here)
# sf::sf_use_s2(FALSE)
dataFolder   <- here::here()
RFolder      <- here::here()
figureFolder <- here::here("figs")
airports <- read.csv(file.path(dataFolder, "airports.csv"))
amm_incomplete <- read_excel(file.path(dataFolder, "MNF_amm.xlsx")) #Datensatz mit allen Flügen, vollständig und unvollständig
world <- st_read(file.path(dataFolder, "TM_WORLD_BORDERS_SIMPL-0 Kopie"))
airports <- airports %>% dplyr::select(-c(continent, home_link, wikipedia_link, elevation_ft, municipality, scheduled_service, type, keywords, name, ident, iso_region, gps_code,local_code))
airports <- subset(airports, iata_code != "")
airports <- airports %>% st_as_sf(coords = c("longitude_deg", "latitude_deg"), crs = 4326, remove = FALSE) %>% rename(coordinates = geometry)
amm_incomplete <- amm_incomplete %>% rename(flight_number = Flugnummer,
DEPARTURE_AIRPORT = Abflug,
ARRIVAL_AIRPORT = Destination,
EMISSIONS_KGCO2EQ = "THG-Emissionen (in t CO2e)",
cabin_class = Serviceklasse,
currencies = "Kosten (in CHF)",
year = Jahr,
distance = "Distanz (in km)")
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "Y"] <- "economy"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "B"] <- "business"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "F"] <- "first"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "P"] <- "premium_economy"
amm_incomplete$currencies <- "USD"
amm_incomplete <- amm_incomplete %>% dplyr::select(-c(EMISSIONS_KGCO2EQ, distance))
amm_incomplete <- amm_incomplete %>%
separate("flight_number",
into = c("fn_code", "fn_number"),
sep = "(?<=[A-Za-z])(?=[0-9])")
amm_incomplete <- subset(amm_incomplete, RecID != 6869)
write.csv(amm_incomplete, file = "amm_incomplete.csv", row.names=FALSE) # Emissions API geht mit beiden files oben, Datensatz
amm <- read.csv(file.path(dataFolder, "amm_complete.csv"))
# Alle Flugdaten mit "MISSING" values
amm <- subset(amm, select = -c(IATA_CODE_DEP))
amm <- subset(amm, select = -c(IATA_CODE_ARR))
amm$EMISSIONS_KGCO2EQ <- as.numeric(amm$EMISSIONS_KGCO2EQ)
amm <- amm %>% drop_na(EMISSIONS_KGCO2EQ)
amm_distance <- amm
(nrow(amm)/nrow(amm_incomplete))*100
amm_arr <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_arr <- amm_arr %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
amm <- left_join(amm,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm <- amm %>% rename(dep_coordinates = coordinates,
dep_country = iso_country)
amm <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm <- amm %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
drop <- c("id.x", "id.y")
amm = amm[,!(names(amm) %in% drop)]
amm_distance <- left_join(amm_distance,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm_distance <- left_join(amm_distance, airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_distance <- amm_distance %>% rename(dep_lon = longitude_deg.x,
dep_lat = latitude_deg.x,
arr_lon = longitude_deg.y,
arr_lat = latitude_deg.y)
amm_distance <- amm_distance %>% rowwise() %>%
mutate(distance_km = (geosphere::distHaversine(c(dep_lon, dep_lat),
c(arr_lon, arr_lat)))/1000)
emissions_per_class <- amm %>%
group_by(year, cabin_class) %>%
summarise(total_emissions = sum(EMISSIONS_KGCO2EQ))
aggregated_distance <- amm_distance %>%
group_by(year) %>%
summarise(total_distance = sum(distance_km))
max_distance <- max(aggregated_distance$total_distance)
red <- wes_palette("Darjeeling1")[1]
green <- wes_palette("Darjeeling1")[2]
orange <- wes_palette("Darjeeling1")[3]
blue <- wes_palette("Darjeeling1")[5]
dark_orange <- wes_palette("Darjeeling1")[4]
black <- wes_palette("Darjeeling2")[5]
eco2 <- ggplot(emissions_per_class, aes(fill=cabin_class, y=total_emissions, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_discrete(name = "Reason for travel")+
ggtitle("Cabin class for each flight at MNF (2018-2020)") +
xlab("") +
ylab("emissions [kgCO2]") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
eco2
ggsave(file="flight_class.png", eco2,
width = 10,
height= 7)
arrdep <- ggplot() +
geom_sf(data=world)+
geom_sf(data = amm, aes(geometry = dep_coordinates, col = "dep_coordinates"), size = .5, shape = 23) +
geom_sf(data = amm, aes(geometry = arr_coordinates, col = "arr_coordinates"), size = .5, shape = 23) +
ggtitle("Departure and arrival locations for all GIUZ flights separated by symbols")+
xlab("Longitude") + ylab("Latitude")+
scale_color_manual(labels = c("Arrival", "Departure"),
values = c("red", "blue"))+
labs(colour = "Flight path")+
theme(legend.position = "none")
arrdep
ggsave(file="flight_locations.png", arrdep,
width = 10,
height= 7)
amm_arr <- st_as_sf(amm_arr)
# sf::sf_use_s2(FALSE)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
sf::sf_use_s2(FALSE)
amm_arr <- st_as_sf(amm_arr)
# sf::sf_use_s2(FALSE)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
# create map
ggplot() +
geom_sf(data=world)+
geom_sf(data = flightmap_sort, aes(fill = n)) +
labs(fill = "Locations per country") +
scico::scale_fill_scico(palette = "bilbao")+
theme(panel.grid.minor = element_blank())+
ggtitle("Arrival locations for all GIUZ flights counnted by country")+
xlab("Longitude") + ylab("Latitude")+
theme(legend.position = "none")
EUISO2 <- read.csv(file.path(dataFolder, "EuroAlpha2-Codes.csv"), sep = ";")
EUISO2$X <- NULL
flightpath_df <- amm %>% select(c("DEPARTURE_AIRPORT", "ARRIVAL_AIRPORT"))
flightpath <- plot_flights(flightpath_df)
View(amm)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
library(readxl)
library(slider)
library(scales)
library(wesanderson)
library(here)
# sf::sf_use_s2(FALSE)
dataFolder   <- here::here()
RFolder      <- here::here()
figureFolder <- here::here("figs")
airports <- read.csv(file.path(dataFolder, "airports.csv"))
amm_incomplete <- read_excel(file.path(dataFolder, "MNF_amm.xlsx")) #Datensatz mit allen Flügen, vollständig und unvollständig
world <- st_read(file.path(dataFolder, "TM_WORLD_BORDERS_SIMPL-0 Kopie"))
airports <- airports %>% dplyr::select(-c(continent, home_link, wikipedia_link, elevation_ft, municipality, scheduled_service, type, keywords, name, ident, iso_region, gps_code,local_code))
airports <- subset(airports, iata_code != "")
airports <- airports %>% st_as_sf(coords = c("longitude_deg", "latitude_deg"), crs = 4326, remove = FALSE) %>% rename(coordinates = geometry)
amm_incomplete <- amm_incomplete %>% rename(flight_number = Flugnummer,
DEPARTURE_AIRPORT = Abflug,
ARRIVAL_AIRPORT = Destination,
EMISSIONS_KGCO2EQ = "THG-Emissionen (in t CO2e)",
cabin_class = Serviceklasse,
currencies = "Kosten (in CHF)",
year = Jahr,
distance = "Distanz (in km)")
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "Y"] <- "economy"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "B"] <- "business"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "F"] <- "first"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "P"] <- "premium_economy"
amm_incomplete$currencies <- "USD"
amm_incomplete <- amm_incomplete %>% dplyr::select(-c(EMISSIONS_KGCO2EQ, distance))
amm_incomplete <- amm_incomplete %>%
separate("flight_number",
into = c("fn_code", "fn_number"),
sep = "(?<=[A-Za-z])(?=[0-9])")
amm_incomplete <- subset(amm_incomplete, RecID != 6869)
write.csv(amm_incomplete, file = "amm_incomplete.csv", row.names=FALSE) # Emissions API geht mit beiden files oben, Datensatz
amm <- read.csv(file.path(dataFolder, "amm_complete.csv"))
View(amm)
# Alle Flugdaten mit "MISSING" values
amm <- subset(amm, select = -c(IATA_CODE_DEP))
amm <- subset(amm, select = -c(IATA_CODE_ARR))
View(amm)
amm_business <- amm
amm_business <- subset(amm_business, select = -c(EMISSIONS_KGCO2EQ))
amm_economy <- amm
amm_economy <- subset(amm_economy, select = -c(EMISSIONS_KGCO2EQ))
write.csv(amm_business, file = "amm_business.csv", row.names=FALSE) # Emissions API geht mit beiden files oben, Datensatz
write.csv(amm_economy, file = "amm_economy.csv", row.names=FALSE) # Emissions API geht mit beiden files oben, Datensatz
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
library(readxl)
library(slider)
library(scales)
library(wesanderson)
library(here)
# sf::sf_use_s2(FALSE)
dataFolder   <- here::here()
RFolder      <- here::here()
figureFolder <- here::here("figs")
airports <- read.csv(file.path(dataFolder, "airports.csv"))
amm_incomplete <- read_excel(file.path(dataFolder, "MNF_amm.xlsx")) #Datensatz mit allen Flügen, vollständig und unvollständig
world <- st_read(file.path(dataFolder, "TM_WORLD_BORDERS_SIMPL-0 Kopie"))
airports <- airports %>% dplyr::select(-c(continent, home_link, wikipedia_link, elevation_ft, municipality, scheduled_service, type, keywords, name, ident, iso_region, gps_code,local_code))
airports <- subset(airports, iata_code != "")
airports <- airports %>% st_as_sf(coords = c("longitude_deg", "latitude_deg"), crs = 4326, remove = FALSE) %>% rename(coordinates = geometry)
amm_incomplete <- amm_incomplete %>% rename(flight_number = Flugnummer,
DEPARTURE_AIRPORT = Abflug,
ARRIVAL_AIRPORT = Destination,
EMISSIONS_KGCO2EQ = "THG-Emissionen (in t CO2e)",
cabin_class = Serviceklasse,
currencies = "Kosten (in CHF)",
year = Jahr,
distance = "Distanz (in km)")
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "Y"] <- "economy"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "B"] <- "business"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "F"] <- "first"
amm_incomplete$cabin_class[amm_incomplete$cabin_class == "P"] <- "premium_economy"
amm_incomplete$currencies <- "USD"
amm_incomplete <- amm_incomplete %>% dplyr::select(-c(EMISSIONS_KGCO2EQ, distance))
amm_incomplete <- amm_incomplete %>%
separate("flight_number",
into = c("fn_code", "fn_number"),
sep = "(?<=[A-Za-z])(?=[0-9])")
amm_incomplete <- subset(amm_incomplete, RecID != 6869)
write.csv(amm_incomplete, file = "amm_incomplete.csv", row.names=FALSE) # Emissions API geht mit beiden files oben, Datensatz
amm <- read.csv(file.path(dataFolder, "amm_complete.csv"))
# Alle Flugdaten mit "MISSING" values
amm <- subset(amm, select = -c(IATA_CODE_DEP))
amm <- subset(amm, select = -c(IATA_CODE_ARR))
amm_business <- amm
amm_business <- subset(amm_business, select = -c(EMISSIONS_KGCO2EQ))
amm_business$cabin_class[amm_business$cabin_class] <- "economy"
View(amm_business)
amm_business <- amm
amm_business <- subset(amm_business, select = -c(EMISSIONS_KGCO2EQ))
amm_business$cabin_class[amm_business$cabin_class = "business"] <- "economy"
amm_business$cabin_class[amm_business$cabin_class == "business"] <- "economy"
amm_business$cabin_class[amm_business$cabin_class == "premium_economy"] <- "economy"
amm_business$cabin_class[amm_business$cabin_class == "first"] <- "economy"
unique(amm_business$cabin_class)
amm <- read.csv(file.path(dataFolder, "amm_complete.csv"))
# Alle Flugdaten mit "MISSING" values
amm <- subset(amm, select = -c(IATA_CODE_DEP))
amm <- subset(amm, select = -c(IATA_CODE_ARR))
amm_business <- amm
amm_business <- subset(amm_business, select = -c(EMISSIONS_KGCO2EQ))
amm_business$cabin_class[amm_business$cabin_class == "business"] <- "economy"
amm_business$cabin_class[amm_business$cabin_class == "premium_economy"] <- "economy"
amm_business$cabin_class[amm_business$cabin_class == "first"] <- "economy"
amm_economy <- amm
amm_economy <- subset(amm_economy, select = -c(EMISSIONS_KGCO2EQ))
amm_economy$cabin_class[amm_economy$cabin_class == "economy"] <- "business"
amm_economy$cabin_class[amm_economy$cabin_class == "premium_economy"] <- "business"
amm_economy$cabin_class[amm_economy$cabin_class == "first"] <- "business"
write.csv(amm_business, file = "amm_business.csv", row.names=FALSE) # Emissions API geht mit beiden files oben, Datensatz
write.csv(amm_economy, file = "amm_economy.csv", row.names=FALSE) # Emissions API geht mit beiden files oben, Datensatz
amm$EMISSIONS_KGCO2EQ <- as.numeric(amm$EMISSIONS_KGCO2EQ)
amm <- amm %>% drop_na(EMISSIONS_KGCO2EQ)
amm_distance <- amm
(nrow(amm)/nrow(amm_incomplete))*100
amm <- read.csv(file.path(dataFolder, "amm_complete.csv"))
# Alle Flugdaten mit "MISSING" values
amm <- subset(amm, select = -c(IATA_CODE_DEP))
amm <- subset(amm, select = -c(IATA_CODE_ARR))
amm_business <- amm
amm_business <- subset(amm_business, select = -c(EMISSIONS_KGCO2EQ))
amm_business$cabin_class[amm_business$cabin_class == "economy"] <- "business"
amm_business$cabin_class[amm_business$cabin_class == "premium_economy"] <- "business"
amm_business$cabin_class[amm_business$cabin_class == "first"] <- "business"
amm_economy <- amm
amm_economy <- subset(amm_economy, select = -c(EMISSIONS_KGCO2EQ))
amm_economy$cabin_class[amm_economy$cabin_class == "business"] <- "economy"
amm_economy$cabin_class[amm_economy$cabin_class == "premium_economy"] <- "economy"
amm_economy$cabin_class[amm_economy$cabin_class == "first"] <- "economy"
write.csv(amm_business, file = "amm_business.csv", row.names=FALSE) # Emissions API geht mit beiden files oben, Datensatz
write.csv(amm_economy, file = "amm_economy.csv", row.names=FALSE) # Emissions API geht mit beiden files oben, Datensatz
amm$EMISSIONS_KGCO2EQ <- as.numeric(amm$EMISSIONS_KGCO2EQ)
amm <- amm %>% drop_na(EMISSIONS_KGCO2EQ)
amm_distance <- amm
(nrow(amm)/nrow(amm_incomplete))*100
